{"version":3,"file":"Alert-46f2343c.js","sources":["../../src/organisms/Alerts/utils/alertStates.tsx","../../src/organisms/Alerts/Alert.tsx"],"sourcesContent":["import { ErrorWhite, InfoWhite, SuccessWhite, WarningWhite } from '@/atoms/Icons'\nimport { vars } from '@/theme'\n\nexport const alertStates = {\n  success: {\n    icon: <SuccessWhite />,\n    bg: vars('colors-alert-ice'),\n    id: 'success',\n  },\n  error: {\n    icon: <ErrorWhite />,\n    bg: vars('colors-alert-veryLightPinkThree'),\n    id: 'error',\n  },\n  info: {\n    icon: <InfoWhite />,\n    bg: vars('colors-alert-veryLightBlue'),\n    id: 'info',\n  },\n  warning: {\n    icon: <WarningWhite />,\n    bg: vars('colors-alert-pale'),\n    id: 'warning',\n  },\n}\n","import { Box, useMediaQuery } from '@chakra-ui/react'\n\nimport { BtnLink, BtnPrimary } from '@/molecules'\nimport { vars } from '@/theme'\nimport { type IAlertProps } from './types.d'\nimport { alertStates } from './utils/alertStates'\nimport { Close } from '@/atoms/Icons'\n\n/**\n * Componente de alerta embebida que puede tener 4 estados diferentes.\n * Opcionalmente puede llevar un botón. El botón puede mostrar sólo un texto\n * o un texto junto a un ícono.\n * @example Implementación de alerta con botón y margen\n * <Alert\n * state='info'\n * buttonName='Texto botón'\n * buttonIcon={<Multimedia />}\n * onClick={() => alert('hola')}\n * m='0 20px'>\n * Mensaje\n * </Alert>\n */\n\nexport function Alert({\n  children,\n  canDismiss = false,\n  buttonText,\n  buttonIcon,\n  buttonLink = false,\n  isFlash = false,\n  onClick,\n  state,\n  m,\n}: IAlertProps): JSX.Element {\n  const [isMobile] = useMediaQuery('(max-width: 425px)')\n\n  const handleClick = (): any => {\n    if (onClick) {\n      onClick()\n    }\n  }\n\n  let buttonType: undefined | 'link' | 'normal'\n  if (buttonText) {\n    buttonType = buttonLink ? 'link' : 'normal'\n  }\n\n  return (\n    <Box\n      className={isFlash ? 'flashNotification' : 'e_alert'}\n      alignItems={!isMobile ? 'center' : 'unset'}\n      backgroundColor={alertStates[state].bg}\n      borderRadius=\"8px\"\n      display=\"flex\"\n      flexFlow={isMobile ? 'column' : 'row'}\n      gap={!isFlash ? '16px' : ''}\n      justifyContent={!isMobile ? 'space-between' : ''}\n      margin={m}\n      width=\"100%\"\n      maxWidth=\"796px\"\n      p=\"1rem\"\n      pr={canDismiss ? '1.75rem' : '1rem'}\n      position=\"relative\"\n    >\n      <Box\n        gap=\"10px\"\n        className=\"alertContent\"\n        display=\"flex\"\n        sx={{\n          '.linkButton': {\n            fontSize: '16px',\n          },\n        }}\n      >\n        <Box\n          className=\"iconContainer\"\n          sx={{\n            svg: {\n              width: 'auto',\n            },\n          }}\n        >\n          {alertStates[state].icon}\n        </Box>\n        <Box display=\"flex\" alignItems=\"center\">\n          <Box\n            as=\"p\"\n            fontFamily=\"Roboto\"\n            fontSize=\"16px\"\n            fontWeight=\"400\"\n            lineHeight=\"28px\"\n            color={vars('colors-neutral-darkCharcoal')}\n          >\n            {children}\n          </Box>\n          {buttonType === 'link' && <BtnLink onClick={handleClick}>{buttonText}</BtnLink>}\n        </Box>\n      </Box>\n\n      {buttonType === 'normal' && (\n        <BtnPrimary isFullWidth={!!isMobile} leftIcon={buttonIcon} onClick={handleClick}>\n          {buttonText}\n        </BtnPrimary>\n      )}\n      {canDismiss && (\n        <Box\n          data-testid=\"closeButton\"\n          cursor=\"pointer\"\n          marginLeft=\"12px\"\n          sx={{\n            svg: {\n              position: 'absolute',\n              top: '16px',\n              right: '12px',\n            },\n          }}\n          onClick={onClick}\n        >\n          <Close />\n        </Box>\n      )}\n    </Box>\n  )\n}\n"],"names":["alertStates","SuccessWhite","vars","ErrorWhite","InfoWhite","WarningWhite","Alert","children","canDismiss","buttonText","buttonIcon","buttonLink","isFlash","onClick","state","isMobile","useMediaQuery","handleClick","buttonType","jsxs","Box","jsx","BtnLink","BtnPrimary","Close"],"mappings":"kLAGO,MAAMA,EAAc,CACzB,QAAS,CACP,WAAOC,EAAa,EAAA,EACpB,GAAIC,EAAK,kBAAkB,EAC3B,GAAI,SACN,EACA,MAAO,CACL,WAAOC,EAAW,EAAA,EAClB,GAAID,EAAK,iCAAiC,EAC1C,GAAI,OACN,EACA,KAAM,CACJ,WAAOE,EAAU,EAAA,EACjB,GAAIF,EAAK,4BAA4B,EACrC,GAAI,MACN,EACA,QAAS,CACP,WAAOG,EAAa,EAAA,EACpB,GAAIH,EAAK,mBAAmB,EAC5B,GAAI,SACN,CACF,ECDO,SAASI,EAAM,CACpB,SAAAC,EACA,WAAAC,EAAa,GACb,WAAAC,EACA,WAAAC,EACA,WAAAC,EAAa,GACb,QAAAC,EAAU,GACV,QAAAC,EACA,MAAAC,EACA,CACF,EAA6B,CAC3B,KAAM,CAACC,CAAQ,EAAIC,EAAc,oBAAoB,EAE/CC,EAAc,IAAW,CACzBJ,GACMA,GACV,EAGE,IAAAK,EACJ,OAAIT,IACFS,EAAaP,EAAa,OAAS,UAInCQ,EAAA,KAACC,EAAA,CACC,UAAWR,EAAU,oBAAsB,UAC3C,WAAaG,EAAsB,QAAX,SACxB,gBAAiBf,EAAYc,CAAK,EAAE,GACpC,aAAa,MACb,QAAQ,OACR,SAAUC,EAAW,SAAW,MAChC,IAAMH,EAAmB,GAAT,OAChB,eAAiBG,EAA6B,GAAlB,gBAC5B,OAAQ,EACR,MAAM,OACN,SAAS,QACT,EAAE,OACF,GAAIP,EAAa,UAAY,OAC7B,SAAS,WAET,SAAA,CAAAW,EAAA,KAACC,EAAA,CACC,IAAI,OACJ,UAAU,eACV,QAAQ,OACR,GAAI,CACF,cAAe,CACb,SAAU,MACZ,CACF,EAEA,SAAA,CAAAC,EAAA,IAACD,EAAA,CACC,UAAU,gBACV,GAAI,CACF,IAAK,CACH,MAAO,MACT,CACF,EAEC,SAAApB,EAAYc,CAAK,EAAE,IAAA,CACtB,EACCK,EAAA,KAAAC,EAAA,CAAI,QAAQ,OAAO,WAAW,SAC7B,SAAA,CAAAC,EAAA,IAACD,EAAA,CACC,GAAG,IACH,WAAW,SACX,SAAS,OACT,WAAW,MACX,WAAW,OACX,MAAOlB,EAAK,6BAA6B,EAExC,SAAAK,CAAA,CACH,EACCW,IAAe,QAAUG,EAAAA,IAACC,EAAQ,CAAA,QAASL,EAAc,SAAWR,EAAA,CAAA,EACvE,CAAA,CAAA,CACF,EAECS,IAAe,UACbG,EAAAA,IAAAE,EAAA,CAAW,YAAa,CAAC,CAACR,EAAU,SAAUL,EAAY,QAASO,EACjE,SACHR,CAAA,CAAA,EAEDD,GACCa,EAAA,IAACD,EAAA,CACC,cAAY,cACZ,OAAO,UACP,WAAW,OACX,GAAI,CACF,IAAK,CACH,SAAU,WACV,IAAK,OACL,MAAO,MACT,CACF,EACA,QAAAP,EAEA,eAACW,EAAM,EAAA,CAAA,CACT,CAAA,CAAA,CAAA,CAIR"}