{"version":3,"file":"http.13559ac9.js","sources":["../../node_modules/refractor/lang/http.js"],"sourcesContent":["'use strict'\n\nmodule.exports = http\nhttp.displayName = 'http'\nhttp.aliases = []\nfunction http(Prism) {\n  ;(function (Prism) {\n    /**\n     * @param {string} name\n     * @returns {RegExp}\n     */\n    function headerValueOf(name) {\n      return RegExp('(^(?:' + name + '):[ \\t]*(?![ \\t]))[^]+', 'i')\n    }\n    Prism.languages.http = {\n      'request-line': {\n        pattern:\n          /^(?:CONNECT|DELETE|GET|HEAD|OPTIONS|PATCH|POST|PRI|PUT|SEARCH|TRACE)\\s(?:https?:\\/\\/|\\/)\\S*\\sHTTP\\/[\\d.]+/m,\n        inside: {\n          // HTTP Method\n          method: {\n            pattern: /^[A-Z]+\\b/,\n            alias: 'property'\n          },\n          // Request Target e.g. http://example.com, /path/to/file\n          'request-target': {\n            pattern: /^(\\s)(?:https?:\\/\\/|\\/)\\S*(?=\\s)/,\n            lookbehind: true,\n            alias: 'url',\n            inside: Prism.languages.uri\n          },\n          // HTTP Version\n          'http-version': {\n            pattern: /^(\\s)HTTP\\/[\\d.]+/,\n            lookbehind: true,\n            alias: 'property'\n          }\n        }\n      },\n      'response-status': {\n        pattern: /^HTTP\\/[\\d.]+ \\d+ .+/m,\n        inside: {\n          // HTTP Version\n          'http-version': {\n            pattern: /^HTTP\\/[\\d.]+/,\n            alias: 'property'\n          },\n          // Status Code\n          'status-code': {\n            pattern: /^(\\s)\\d+(?=\\s)/,\n            lookbehind: true,\n            alias: 'number'\n          },\n          // Reason Phrase\n          'reason-phrase': {\n            pattern: /^(\\s).+/,\n            lookbehind: true,\n            alias: 'string'\n          }\n        }\n      },\n      header: {\n        pattern: /^[\\w-]+:.+(?:(?:\\r\\n?|\\n)[ \\t].+)*/m,\n        inside: {\n          'header-value': [\n            {\n              pattern: headerValueOf(/Content-Security-Policy/.source),\n              lookbehind: true,\n              alias: ['csp', 'languages-csp'],\n              inside: Prism.languages.csp\n            },\n            {\n              pattern: headerValueOf(/Public-Key-Pins(?:-Report-Only)?/.source),\n              lookbehind: true,\n              alias: ['hpkp', 'languages-hpkp'],\n              inside: Prism.languages.hpkp\n            },\n            {\n              pattern: headerValueOf(/Strict-Transport-Security/.source),\n              lookbehind: true,\n              alias: ['hsts', 'languages-hsts'],\n              inside: Prism.languages.hsts\n            },\n            {\n              pattern: headerValueOf(/[^:]+/.source),\n              lookbehind: true\n            }\n          ],\n          'header-name': {\n            pattern: /^[^:]+/,\n            alias: 'keyword'\n          },\n          punctuation: /^:/\n        }\n      }\n    } // Create a mapping of Content-Type headers to language definitions\n    var langs = Prism.languages\n    var httpLanguages = {\n      'application/javascript': langs.javascript,\n      'application/json': langs.json || langs.javascript,\n      'application/xml': langs.xml,\n      'text/xml': langs.xml,\n      'text/html': langs.html,\n      'text/css': langs.css,\n      'text/plain': langs.plain\n    } // Declare which types can also be suffixes\n    var suffixTypes = {\n      'application/json': true,\n      'application/xml': true\n    }\n    /**\n     * Returns a pattern for the given content type which matches it and any type which has it as a suffix.\n     *\n     * @param {string} contentType\n     * @returns {string}\n     */\n    function getSuffixPattern(contentType) {\n      var suffix = contentType.replace(/^[a-z]+\\//, '')\n      var suffixPattern = '\\\\w+/(?:[\\\\w.-]+\\\\+)+' + suffix + '(?![+\\\\w.-])'\n      return '(?:' + contentType + '|' + suffixPattern + ')'\n    } // Insert each content type parser that has its associated language\n    // currently loaded.\n    var options\n    for (var contentType in httpLanguages) {\n      if (httpLanguages[contentType]) {\n        options = options || {}\n        var pattern = suffixTypes[contentType]\n          ? getSuffixPattern(contentType)\n          : contentType\n        options[contentType.replace(/\\//g, '-')] = {\n          pattern: RegExp(\n            '(' +\n              /content-type:\\s*/.source +\n              pattern +\n              /(?:(?:\\r\\n?|\\n)[\\w-].*)*(?:\\r(?:\\n|(?!\\n))|\\n)/.source +\n              ')' + // This is a little interesting:\n              // The HTTP format spec required 1 empty line before the body to make everything unambiguous.\n              // However, when writing code by hand (e.g. to display on a website) people can forget about this,\n              // so we want to be liberal here. We will allow the empty line to be omitted if the first line of\n              // the body does not start with a [\\w-] character (as headers do).\n              /[^ \\t\\w-][\\s\\S]*/.source,\n            'i'\n          ),\n          lookbehind: true,\n          inside: httpLanguages[contentType]\n        }\n      }\n    }\n    if (options) {\n      Prism.languages.insertBefore('http', 'header', options)\n    }\n  })(Prism)\n}\n"],"names":["http_1","http","Prism","headerValueOf","name","langs","httpLanguages","suffixTypes","getSuffixPattern","contentType","suffix","suffixPattern","options","pattern"],"mappings":"kWAEA,IAAAA,EAAiBC,EACjBA,EAAK,YAAc,OACnBA,EAAK,QAAU,CAAE,EACjB,SAASA,EAAKC,EAAO,EACjB,SAAUA,EAAO,CAKjB,SAASC,EAAcC,EAAM,CAC3B,OAAO,OAAO,QAAUA,EAAO,uBAA0B,GAAG,CAC7D,CACDF,EAAM,UAAU,KAAO,CACrB,eAAgB,CACd,QACE,6GACF,OAAQ,CAEN,OAAQ,CACN,QAAS,YACT,MAAO,UACR,EAED,iBAAkB,CAChB,QAAS,mCACT,WAAY,GACZ,MAAO,MACP,OAAQA,EAAM,UAAU,GACzB,EAED,eAAgB,CACd,QAAS,oBACT,WAAY,GACZ,MAAO,UACR,CACF,CACF,EACD,kBAAmB,CACjB,QAAS,wBACT,OAAQ,CAEN,eAAgB,CACd,QAAS,gBACT,MAAO,UACR,EAED,cAAe,CACb,QAAS,iBACT,WAAY,GACZ,MAAO,QACR,EAED,gBAAiB,CACf,QAAS,UACT,WAAY,GACZ,MAAO,QACR,CACF,CACF,EACD,OAAQ,CACN,QAAS,sCACT,OAAQ,CACN,eAAgB,CACd,CACE,QAASC,EAAc,0BAA0B,MAAM,EACvD,WAAY,GACZ,MAAO,CAAC,MAAO,eAAe,EAC9B,OAAQD,EAAM,UAAU,GACzB,EACD,CACE,QAASC,EAAc,mCAAmC,MAAM,EAChE,WAAY,GACZ,MAAO,CAAC,OAAQ,gBAAgB,EAChC,OAAQD,EAAM,UAAU,IACzB,EACD,CACE,QAASC,EAAc,4BAA4B,MAAM,EACzD,WAAY,GACZ,MAAO,CAAC,OAAQ,gBAAgB,EAChC,OAAQD,EAAM,UAAU,IACzB,EACD,CACE,QAASC,EAAc,QAAQ,MAAM,EACrC,WAAY,EACb,CACF,EACD,cAAe,CACb,QAAS,SACT,MAAO,SACR,EACD,YAAa,IACd,CACF,CACF,EACD,IAAIE,EAAQH,EAAM,UACdI,EAAgB,CAClB,yBAA0BD,EAAM,WAChC,mBAAoBA,EAAM,MAAQA,EAAM,WACxC,kBAAmBA,EAAM,IACzB,WAAYA,EAAM,IAClB,YAAaA,EAAM,KACnB,WAAYA,EAAM,IAClB,aAAcA,EAAM,KACrB,EACGE,EAAc,CAChB,mBAAoB,GACpB,kBAAmB,EACpB,EAOD,SAASC,EAAiBC,EAAa,CACrC,IAAIC,EAASD,EAAY,QAAQ,YAAa,EAAE,EAC5CE,EAAgB,wBAA0BD,EAAS,eACvD,MAAO,MAAQD,EAAc,IAAME,EAAgB,GACpD,CAED,IAAIC,EACJ,QAASH,KAAeH,EACtB,GAAIA,EAAcG,GAAc,CAC9BG,EAAUA,GAAW,CAAE,EACvB,IAAIC,EAAUN,EAAYE,GACtBD,EAAiBC,CAAW,EAC5BA,EACJG,EAAQH,EAAY,QAAQ,MAAO,GAAG,GAAK,CACzC,QAAS,OACP,IACE,mBAAmB,OACnBI,EACA,iDAAiD,OACjD,IAKA,mBAAmB,OACrB,GACD,EACD,WAAY,GACZ,OAAQP,EAAcG,EACvB,CACF,CAECG,GACFV,EAAM,UAAU,aAAa,OAAQ,SAAUU,CAAO,CAEzD,GAAEV,CAAK,CACV"}