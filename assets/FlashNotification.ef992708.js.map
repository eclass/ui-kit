{"version":3,"file":"FlashNotification.ef992708.js","sources":["../../src/organisms/Alerts/utils/handleTime.ts","../../src/organisms/Alerts/FlashNotification.tsx","../../src/organisms/Alerts/utils/useFlashNotification.ts","../../src/documentation/components/FlashNotificationDemo.tsx","../../src/documentation/pages/Organisms/FlashNotification.tsx"],"sourcesContent":["/* Método que cuenta la cantidad de palabras del mensaje de alerta o notificación\ny según eso calcula el tiempo que durará en pantalla */\n\nexport const handleTime = (message: string): number => {\n  // Se recibe el mensaje y se retorna la cantidad de palabras\n  function countWords(input: string): number {\n    const wordCount = input.match(/(\\w+)/g)?.length ?? 0\n    return wordCount\n  }\n  // Por defecto la duración es de 3seg, si el mensaje tiene más de 5 palabras, se cambia a 6\n  let time = 3000\n  if (message && countWords(message) > 5) {\n    time = 6000\n  }\n  return time\n}\n","import { Box } from '@chakra-ui/react'\nimport { useCallback, useEffect } from 'react'\nimport { toast, Toaster } from 'react-hot-toast'\n\nimport { IFlashNotificationProps } from './types.d'\nimport { alertStates } from './utils/alertStates'\nimport { handleTime } from './utils/handleTime'\nimport { Alert } from './Alert'\n\n/**\n * Componente de notificación flash que se muestra centrada en la parte superior de la pantalla.\n * Para implementarlo, se usa en conjunto con el hook useFlashNotification.\n * @example Llamado useFlashNotification y asignación de props\n * const { show, active, config } = useFlashNotification({\n *  state: 'info',\n *   message: 'Respuesta guardada',\n *})\n * @example Definición de trigger que activa la notificación\n * <button onClick={() => { active()}}> Activar notificación </button>\n * @example Componente FlashNotification recibiendo argumentos\n * <FlashNotification {...config} show={show} />\n */\n\nexport function FlashNotification({\n  message,\n  state,\n  show,\n  m,\n}: IFlashNotificationProps): JSX.Element {\n  const showToast = useCallback(() => {\n    toast(\n      (t) => (\n        <Alert isFlash state={state} canDismiss onClick={() => toast.dismiss(t.id)}>\n          {message}\n        </Alert>\n      ),\n      {\n        duration: handleTime(message),\n        id: alertStates[state].id,\n      }\n    )\n  }, [message, state])\n\n  useEffect(() => {\n    if (show) {\n      showToast()\n    }\n  }, [show, showToast])\n\n  return (\n    <Box>\n      <Toaster\n        toastOptions={{\n          className: 'toastContainer',\n          style: {\n            background: 'transparent',\n            boxShadow: 'none',\n          },\n        }}\n      />\n    </Box>\n  )\n}\n","import { useEffect, useState } from 'react'\nimport { IFlashNotificationProps } from '../types'\nimport { handleTime } from './handleTime'\n\n/**\n * Hook que actúa como trigger del componente FlashNotification,\n * usando los siguientes parámetros:\n * show: boolean que indica si la notificación se está mostrando o no,\n * active: función que modifica el estado de show,\n * config: contiene los valores de 'state' y message'\n * @example Llamado useFlashNotification y asignación de props\n * const { show, active, config } = useFlashNotification({\n *  state: 'info',\n *   message: 'Respuesta guardada',\n *})\n * @example Definición de trigger que activa la notificación\n * <button onClick={() => { active()}}> Activar notificación </button>\n * @example Componente FlashNotification recibiendo argumentos\n * <FlashNotification {...config} show={show} />\n */\n\nexport const useFlashNotification = ({ state, message }: IFlashNotificationProps): any => {\n  // Estado que maneja si la notificación debe mostrarse.\n  const [show, setShow] = useState(false)\n\n  // Effect que controla la visibilidad de la notificación basado en los cambios de estado\n  useEffect(() => {\n    // Si la notificación se está mostrando, se determina el tiempo tras el cual se ocultará.\n    if (show) {\n      const timeOut = setTimeout(() => {\n        setShow(false)\n      }, handleTime(message))\n      return () => clearTimeout(timeOut)\n    }\n  }, [message, show])\n\n  // Función que activa la notificación\n  const active = (): any => {\n    if (!show) {\n      setShow(true)\n    }\n  }\n\n  // Se retorna el estado de show, la función active y el objeto de config que contiene el estado y mensaje.\n  return {\n    show,\n    active,\n    config: {\n      state,\n      message,\n    },\n  }\n}\n","import { FlashNotification, useFlashNotification } from '@/organisms'\nimport { IFlashNotificationProps } from '@/organisms/Alerts/types'\nimport { Box, Button } from '@chakra-ui/react'\n\nexport default function FlashNotificationDemo({\n  state,\n  message,\n}: IFlashNotificationProps): JSX.Element {\n  const { show, active, config } = useFlashNotification({\n    state: state,\n    message: message,\n  })\n  return (\n    <Box>\n      <Button\n        onClick={() => {\n          active()\n        }}\n      >\n        {state}\n      </Button>\n      <FlashNotification {...config} show={show} />\n    </Box>\n  )\n}\n","import { ListComponent, MyHeading, MyText, MyTittle, Code } from '@/documentation/components'\nimport FlashNotificationDemo from '@/documentation/components/FlashNotificationDemo'\n\nexport const ViewFlashNotification = (): JSX.Element => {\n  return (\n    <>\n      <MyHeading>Flash Notifications</MyHeading>\n      <MyText>\n        Las notificaciones flash se utilizan para entregar feedback desde el sistema, inmediatamente\n        después de un evento accionado por el usuario{' '}\n        <i>\n          (Ej: luego de agendar una clase en vivo, luego ingresar una pregunta sobre el curso, etc)\n        </i>{' '}\n        o accionado por el mismo sistema{' '}\n        <i>(Ej: Problemas de conexión, fallos al guardar o cargar datos, etc.)</i>\n      </MyText>\n      <MyText>\n        Tiempo de permanencia en pantalla: Se recomienda <b>no exceder las 25 palabras</b> para\n        alertas flash para una correcta lectura de la información.\n      </MyText>\n      <MyText>\n        Según la cantidad de la palabras la duración será la siguiente:{' '}\n        <li>\n          <b>De 1 a 5 palabras:</b> 3 segundos.\n        </li>{' '}\n        <li>\n          <b>De 11 a 25 palabras:</b> 6 segundos.\n        </li>{' '}\n        <br />\n        El componente de FlashNotification se implementa en conjunto con el hook\n        useFlashNotification\n      </MyText>\n      <Code text=\"import { FlashNotification, useFlashNotification } from '@eclass/ui-kit'\" />\n\n      <MyTittle>Estados</MyTittle>\n      <MyText>Existen 4 posibles estados que definen el ícono y color de la notificación.</MyText>\n      <ListComponent>\n        <FlashNotificationDemo state=\"info\" message=\"Mensaje informativo\" />\n        <FlashNotificationDemo state=\"success\" message=\"Mensaje de éxito\" />\n        <FlashNotificationDemo state=\"error\" message=\"Mensaje de error\" />\n        <FlashNotificationDemo state=\"warning\" message=\"Mensaje de advertencia\" />\n      </ListComponent>\n      <Code\n        text=\"// Se define la constante que llama a useNotificationFlash y contiene el estado y mensaje\nconst { show, active, config } = useFlashNotification({\nstate: 'info',\nmessage: 'Mensaje informativo',\n})\n// Se pasa la función active al elemento que activará la notificación\n<Button onClick={ () => {active()} } > {state} </Button>\n// Se le dan los argumentos de config al componente de FlashNotification\n<FlashNotification {...config} show={show} />\"\n      />\n    </>\n  )\n}\n\nexport default ViewFlashNotification\n"],"names":["handleTime","message","countWords","input","_b","_a","time","FlashNotification","state","show","m","showToast","useCallback","t","Alert","isFlash","canDismiss","onClick","toast","dismiss","id","children","duration","alertStates","useEffect","Box","Toaster","toastOptions","className","style","background","boxShadow","useFlashNotification","setShow","useState","timeOut","FlashNotificationDemo","active","config","_jsx","Button","ViewFlashNotification","_Fragment","MyHeading","_jsxs","MyText","Code","text","MyTittle","ListComponent"],"mappings":"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"}