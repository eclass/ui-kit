{"version":3,"file":"Alert.19ac1005.js","sources":["../../src/organisms/Alerts/utils/alertStates.tsx","../../src/organisms/Alerts/Alert.tsx"],"sourcesContent":["import { ErrorWhite, InfoWhite, SuccessWhite, WarningWhite } from '@/atoms/Icons'\nimport { vars } from '@/theme'\n\nexport const alertStates = {\n  success: {\n    icon: <SuccessWhite />,\n    bg: vars('colors-alert-ice'),\n    id: 'success',\n  },\n  error: {\n    icon: <ErrorWhite />,\n    bg: vars('colors-alert-veryLightPinkThree'),\n    id: 'error',\n  },\n  info: {\n    icon: <InfoWhite />,\n    bg: vars('colors-alert-veryLightBlue'),\n    id: 'info',\n  },\n  warning: {\n    icon: <WarningWhite />,\n    bg: vars('colors-alert-pale'),\n    id: 'warning',\n  },\n}\n","import { Box, HStack, useMediaQuery } from '@chakra-ui/react'\n\nimport { BtnLink, BtnPrimary } from '@/molecules'\nimport { vars } from '@/theme'\nimport { IAlertProps } from './types.d'\nimport { alertStates } from './utils/alertStates'\nimport { Close } from '@/atoms/Icons'\n\n/**\n * Componente de alerta embebida que puede tener 4 estados diferentes.\n * Opcionalmente puede llevar un botón. El botón puede mostrar sólo un texto\n * o un texto junto a un ícono.\n * @example Implementación de alerta con botón y margen\n * <Alert\n * state='info'\n * buttonName='Texto botón'\n * buttonIcon={<Multimedia />}\n * onClick={() => alert('hola')}\n * m='0 20px'>\n * Mensaje\n * </Alert>\n */\n\nexport function Alert({\n  children,\n  canDismiss = false,\n  buttonText,\n  buttonIcon,\n  buttonLink = false,\n  isFlash = false,\n  onClick,\n  state,\n  m,\n}: IAlertProps): JSX.Element {\n  const [isMobile] = useMediaQuery('(max-width: 425px)')\n\n  const handleClick = (): any => {\n    if (onClick) {\n      onClick()\n    }\n  }\n\n  let buttonType: undefined | 'link' | 'normal'\n  if (buttonText) {\n    buttonType = buttonLink ? 'link' : 'normal'\n  }\n\n  return (\n    <Box\n      className={isFlash ? 'flashNotification' : 'embeddedAlert'}\n      alignItems={!isMobile ? 'center' : 'unset'}\n      backgroundColor={alertStates[state].bg}\n      borderRadius=\"8px\"\n      display=\"flex\"\n      flexFlow={isMobile ? 'column' : 'row'}\n      gap={!isFlash ? '16px' : ''}\n      justifyContent={!isMobile ? 'space-between' : ''}\n      margin={m}\n      width=\"100%\"\n      maxWidth=\"796px\"\n      p=\"1rem\"\n      pr={canDismiss ? '1.75rem' : '1rem'}\n      position=\"relative\"\n    >\n      <HStack\n        gap=\"10px\"\n        className=\"alertContent\"\n        sx={{\n          '.linkButton': {\n            fontSize: '16px',\n          },\n        }}\n      >\n        <Box\n          className=\"iconContainer\"\n          sx={{\n            svg: {\n              width: 'auto',\n            },\n          }}\n        >\n          {alertStates[state].icon}\n        </Box>\n        <Box\n          fontFamily=\"Roboto\"\n          fontSize=\"16px\"\n          fontWeight=\"400\"\n          lineHeight=\"28px\"\n          color={vars('colors-neutral-darkCharcoal')}\n        >\n          {children}\n          {buttonType === 'link' && <BtnLink onClick={handleClick}>{buttonText}</BtnLink>}\n        </Box>\n      </HStack>\n\n      {buttonType === 'normal' && (\n        <BtnPrimary isFullWidth={!!isMobile} leftIcon={buttonIcon} onClick={handleClick}>\n          {buttonText}\n        </BtnPrimary>\n      )}\n      {canDismiss && (\n        <Box\n          data-testid=\"closeButton\"\n          cursor=\"pointer\"\n          marginLeft=\"12px\"\n          sx={{\n            svg: {\n              position: 'absolute',\n              top: '16px',\n              right: '12px',\n            },\n          }}\n          onClick={onClick}\n        >\n          <Close />\n        </Box>\n      )}\n    </Box>\n  )\n}\n"],"names":["alertStates","success","icon","_jsx","SuccessWhite","bg","vars","id","error","ErrorWhite","info","InfoWhite","warning","WarningWhite","Alert","children","canDismiss","buttonText","buttonIcon","buttonLink","isFlash","onClick","state","m","isMobile","useMediaQuery","handleClick","buttonType","Box","className","alignItems","backgroundColor","borderRadius","display","flexFlow","gap","justifyContent","margin","width","maxWidth","p","pr","position","_jsxs","HStack","sx","fontSize","svg","fontFamily","fontWeight","lineHeight","color","BtnLink","BtnPrimary","isFullWidth","leftIcon","cursor","marginLeft","top","right","Close"],"mappings":"kMAGO,MAAMA,EAAc,CACzBC,QAAS,CACPC,KAAMC,EAACC,IAAc,EACrBC,GAAIC,EAAK,kBAAkB,EAC3BC,GAAI,SACN,EACAC,MAAO,CACLN,KAAMC,EAACM,IAAY,EACnBJ,GAAIC,EAAK,iCAAiC,EAC1CC,GAAI,OACN,EACAG,KAAM,CACJR,KAAMC,EAACQ,IAAW,EAClBN,GAAIC,EAAK,4BAA4B,EACrCC,GAAI,MACN,EACAK,QAAS,CACPV,KAAMC,EAACU,IAAc,EACrBR,GAAIC,EAAK,mBAAmB,EAC5BC,GAAI,SACN,CACF,ECDO,SAASO,EAAM,CACpBC,SAAAA,EACAC,WAAAA,EAAa,GACbC,WAAAA,EACAC,WAAAA,EACAC,WAAAA,EAAa,GACbC,QAAAA,EAAU,GACVC,QAAAA,EACAC,MAAAA,EACAC,EAAAA,CACW,EAAgB,CAC3B,KAAM,CAACC,CAAQ,EAAIC,EAAc,oBAAoB,EAE/CC,EAAcA,IAAW,CACzBL,GACMA,GACV,EAGEM,IAAAA,EACJ,OAAIV,IACFU,EAAaR,EAAa,OAAS,YAIlCS,EAAG,CACFC,UAAWT,EAAU,oBAAsB,gBAC3CU,WAAaN,EAAsB,QAAX,SACxBO,gBAAiB/B,EAAYsB,GAAOjB,GACpC2B,aAAa,MACbC,QAAQ,OACRC,SAAUV,EAAW,SAAW,MAChCW,IAAMf,EAAmB,GAAT,OAChBgB,eAAiBZ,EAA6B,GAAlB,gBAC5Ba,OAAQd,EACRe,MAAM,OACNC,SAAS,QACTC,EAAE,OACFC,GAAIzB,EAAa,UAAY,OAC7B0B,SAAS,WAAU3B,SAAA,CAEnB4B,EAACC,EAAM,CACLT,IAAI,OACJN,UAAU,eACVgB,GAAI,CACF,cAAe,CACbC,SAAU,MACZ,CACF,EAAE/B,SAAA,CAEFZ,EAACyB,EAAG,CACFC,UAAU,gBACVgB,GAAI,CACFE,IAAK,CACHT,MAAO,MACT,CACF,EAAEvB,SAEDf,EAAYsB,GAAOpB,IAAAA,CACjB,EACLyC,EAACf,EAAG,CACFoB,WAAW,SACXF,SAAS,OACTG,WAAW,MACXC,WAAW,OACXC,MAAO7C,EAAK,6BAA6B,EAAES,SAAA,CAE1CA,EACAY,IAAe,UAAWyB,EAAO,CAAC/B,QAASK,EAAYX,SAAEE,CAAAA,CAAoB,CAAC,CAAA,CAC5E,CAAC,CACA,CAAA,EAEPU,IAAe,YACb0B,EAAU,CAACC,YAAa,CAAC,CAAC9B,EAAU+B,SAAUrC,EAAYG,QAASK,EAAYX,SAC7EE,CAAAA,CACS,EAEbD,GACCb,EAACyB,EAAG,CACF,cAAY,cACZ4B,OAAO,UACPC,WAAW,OACXZ,GAAI,CACFE,IAAK,CACHL,SAAU,WACVgB,IAAK,OACLC,MAAO,MACT,CACF,EACAtC,QAAAA,EAAiBN,SAEjBZ,EAACyD,EAAO,EAAA,CAAA,CACL,CACN,CAAA,CACE,CAET"}